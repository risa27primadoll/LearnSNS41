ログインしているユーザ名と画像が確認できる
ログアウトできる
投稿ができる
空チェックのバリデーションがある
ユーザーは投稿の全てを見ることができる
各投稿には投稿したユーザ名と画像が表示されている
ユーザは投稿にいいねできる
編集画面へ移動できる
編集ボタンから詳細画面へ遷移する
投稿の削除ができる
ページネーションできる

SELECT COUNT(*) as `likeflag` FROM `likes` WHERE `user_id`=53 AND `feed_id` =54



ページネーション

SELECT * FROM `feeds` ORDER BY `created` DESC

$pageに今表示するページ番号が代入されている。
$page = 1;  //1ページ目
$page = 2;  //2ページ目
$page = 3;  //3ページ目

$start = ($page -1)*5;


//最初の5件を取得
SELECT * FROM `feeds` ORDER BY `created` DESC LIMIT 0,5

//LIMIT句の使い方
LIMIT 取得を開始したい場所（０から始まる),取得したい件数

//次の5件を取得
SELECT * FROM `feeds` ORDER BY `created` DESC LIMIT ５,5

//次の5件を取得
SELECT * FROM `feeds` ORDER BY `created` DESC LIMIT 10,5


５月30日にやったこと
・ページによって表示するデータを変えるために取得するSQLを変える（LIMIT句を使う）
・Newer,Older ボタンのリンク

今後の予定
・Older,Newerのボタンを、押してほしくない時にはDisabledを追加するという条件を追加
・不正なページ番号を指定された場合の対応
　http://localhost/LearnSNS/timeline.php?page=2        //正常
　http://localhost/LearnSNS/timeline.php?page=-1       //不正
　http://localhost/LearnSNS/timeline.php?page=100     //不正（100ページも存在しないとき）

ファイル読み込み
require
動作
エラーが出た時に処理を中断し、読み込み側のその後の処理を行わない


利用をする時
DBに接続など、エラーが起きたら致命的な処理の場合使用（その後の処理を行ってもあまり意味がない）

include
動作
エラー起きた時に、処理を継続し、読み込み側ん０その後の処理も継続する。

利用する時
HTMLなどに表示を行う時に使用（多少のエラーが有っても全体的に処理を行った方がユーザーに対してメリットが有る。